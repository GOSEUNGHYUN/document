==========================================================
> npm install recoil
==========================================================


index.tsx
----------------------------------------------------------
import { RecoilRoot } from "recoil";

<RecoilRoot>
	<App />
</RecoilRoot>


atoms.ts
----------------------------------------------------------
import { atom } from "recoil";

export const isDarkAtom = atom({
	key: "isDark",
	default: true
});


useRecoilValue(atoms) : atom의 값을 반환합니다
useSetRecoilState(atoms) : atom을 변경하는 함수를 반환합니다.

/* 컴포넌트가 atom의 값을 관찰하기 시작할 때, atom이 변경되면 컴포넌트도 변경된 값으로 다시 리렌더링 된다. */



useRecoilState
= useRecoilValue + useSetRecoilState
----------------------------------------------------------
const [ value, setValue ] = useState()

/* 일반적인 React JS의 useState를 쓰는 것과 같습니다 */
const [ value, modFn ] = useRecoilState(atoms)

modFn
/* 이 function은 React의 setState와 같은 방식으로 작동합니다 */
1. 값을 즉시 변경 할 수 있습니다.
modFn(true);
2. 현재 값을 argument로 주는 function을 만들 수 있습니다.
modFn((prev) => !prev);







==========================================================
selector
두개의 atom을 가질 필요 없이 하나의 state로 처리할 때 사용합니다.
==========================================================

get function
atom의 output을 변형시킬 수 있습니다
----------------------------------------------------------

export const toDoState = atom<IToDo[]>({
  key: "toDo",
  default: [],
});

export const toDoSelector = selector({
  key: "toDoSelector",
  get: ({ get }) => {
    const toDos = get(toDoState);
    return [
      toDos.filter((toDo) => toDo.category === "TO_DO"),
      toDos.filter((toDo) => toDo.category === "DOING"),
      toDos.filter((toDo) => toDo.category === "DONE"),
    ];
  },
});


get function를 이용하면 selector의 내부로 atom을 가지고 올 수 있습니다



배열 안의 배열을 선택하려면 이렇게 배열을 열고 순서대로 이름을 지정하면 됩니다
react의 useState()를 사용할 때와 같습니다

const [toDo, doing, done] = [[],[],[]] = useRecoilValue(toDoSelector);


enum
----------------------------------------------------------
enum을 생성할 때 기본적으로 숫자로 만들어 집니다.
export enum Categories {
  "TO_DO",
  "DOING",
  "DONE",
}

"TO_DO" = 0
"DOING" = 1
"DONE" = 2


문자열로 바꾸고 싶다면 아래처럼 하세요.
export enum Categories {
  "TO_DO" = "TO_DO",
  "DOING" = "DOING",
  "DONE" = "DONE",
}

"TO_DO" = "TO_DO"
"DOING" = "DOING"
"DONE" = "DONE"


set function
----------------------------------------------------------
(property) ReadWriteSelectorOptions<number>.set: (opts: {
    set: SetRecoilState;
    get: GetRecoilValue;
    reset: ResetRecoilState;
}, newValue: number | DefaultValue) => void

첫번째 argument는 state를 받습니다
두번째 argument는 우리가 보내는 새로운 값을 주고 있습니다.
const [value, setValue] = useRecoilState()에서 setValue()를 사용하여 보내는 값을 newValue로 받습니다.